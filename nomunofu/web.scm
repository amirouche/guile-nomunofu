(define-module (nomunofu web))

(import (scheme base))
(import (scheme assume))

(import (ice-9 match))
(import (web http))
(import (rnrs io ports))

(import (nomunofu app))
(import (nomunofu log))
(import (nomunofu fash))
(import (nomunofu generator))
(import (nomunofu okvs engine))
(import (nomunofu okvs nstore))
(import (nomunofu web server))
(import (nomunofu web helpers))


(define (make-query pattern)
  (assume (= (length pattern) 3))
  (let loop ((pattern pattern)
             (out '()))
    (if (null? pattern)
        (reverse out)
        (if (pair? (car pattern))
            (loop (cdr pattern) (cons (nstore-var (cdar pattern)) out))
            (loop (cdr pattern) (cons (car pattern) out))))))

(define (handle/transaction transaction nstore patterns port)
  (generator-for-each
   (lambda (item) (alist->json (fash->alist item) port))
   (let loop ((patterns (cdr patterns))
              (generator (nstore-select transaction nstore (make-query (car patterns)))))
     (if (null? patterns)
         generator
         (loop (cdr patterns)
               ((nstore-where transaction nstore (make-query (car patterns))) generator))))))

(define (alist->json alist port)
  (put-char port #\{)
  (let loop ((alist alist))
    (if (pair? (cdr alist))
        (let ((head (car alist)))
          (put-char port #\")
          (put-string port (symbol->string (car head)))
          (put-char port #\")
          (put-char port #\:)
          (write (cdr head) port)
          (put-char port #\,)
          (loop (cdr alist)))
        (let ((head (car alist)))
          (put-char port #\")
          (put-string port (symbol->string (car head)))
          (put-char port #\")
          (put-char port #\:)
          (write (cdr head) port))))
  (put-char port #\})
  (put-char port #\newline))

(define (decode bytevector)
  (call-with-input-string
   (utf8->string bytevector)
   (lambda (port)
     (let loop ((item (read port))
                (out '()))
       (if (eof-object? item)
           (reverse out)
           (loop (read port) (cons item out)))))))

(define (handle app body port)
  (let* ((patterns (decode body)))
    (if (null? patterns)
        #f
        (engine-in-transaction (app-engine app) (app-okvs app)
          (lambda (transaction)
            (handle/transaction transaction (app-nstore app) patterns port))))))

(define-public (subcommand-serve app port)
  (log-info "web server starting at PORT" port)
  (run-server port
              (lambda (request body port)
                (write-response-line (cons 1 0) 200 "OK" port)
                (put-string port "\r\n")
                (handle app body port)
                (close-port port))))
